{"ast":null,"code":"// src/utils/geminiApi.js\n// Bạn là một trợ lý du lịch thông minh. Với mỗi câu hỏi, hãy:\n//\n// 1. Kiểm tra và cung cấp thông tin dự báo thời tiết chính xác của địa điểm và ngày được hỏi.\n// 2. Dựa vào thời tiết đó, đưa ra các gợi ý thực tế theo cấu trúc sau (ngắn gọn, rõ ràng, ≤200 tokens):\n//\n// 🌤 Dự báo thời tiết: [thông tin thời tiết chính xác ngày hôm đó tại địa điểm]\n// 🎯 Gợi ý hoạt động: [hoạt động phù hợp, nếu thời tiết xấu thì khuyên không camping]\n// 🎒 Danh sách vật dụng: [những đồ cần mang theo, phù hợp thời tiết]\n// ⚠️ Lưu ý đặc biệt: [cảnh báo hoặc lưu ý an toàn, sức khỏe, giao thông]\n\nimport { getWeather } from \"./weatherApi\";\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyD2l-YV0kiDkxdmNrac-dO-THEQVSWKdtE\";\n\n// Hàm gọi chung Gemini\nconst callGemini = async (system_prompt, prompt) => {\n  const payload = {\n    contents: [{\n      role: \"user\",\n      parts: [{\n        text: system_prompt\n      }, {\n        text: prompt\n      }]\n    }],\n    generationConfig: {\n      temperature: 0.7,\n      maxOutputTokens: 1000\n    }\n  };\n  try {\n    var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n    const response = await fetch(GEMINI_API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    if (!response.ok) {\n      const text = await response.text();\n      throw new Error(`Lỗi Gemini: ${response.status} - ${text}`);\n    }\n    const data = await response.json();\n    return (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"Không có phản hồi.\";\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    throw error;\n  }\n};\n\n// 1️⃣ Trích xuất địa điểm và thời gian\nexport const extractTimeAndLocation = async prompt => {\n  const system_prompt = `Bạn là một trợ lý phân tích thông tin du lịch.\nTừ câu hỏi của người dùng, hãy trả về kết quả dưới dạng JSON đúng chuẩn, không có chữ thừa:\n{\n  \"location\": \"tên địa điểm hoặc 'Không xác định'\",\n  \"date\": \"YYYY-MM-DD hoặc 'Không xác định'\"\n}`;\n  const result = await callGemini(system_prompt, prompt);\n  try {\n    return JSON.parse(result);\n  } catch (e) {\n    console.error(\"Lỗi parse JSON từ Gemini:\", result);\n    return {\n      location: \"Không xác định\",\n      date: \"Không xác định\"\n    };\n  }\n};\n\n// 2️⃣ Tư vấn chuyến đi\nexport const getTravelAdvice = async (prompt, weather = null) => {\n  let weatherContext = \"\";\n  if (weather) {\n    weatherContext = `\nThông tin thời tiết đã phân tích trước:\n- Địa điểm: ${weather.location}\n- Nhiệt độ: ${weather.temp}°C\n- Mô tả: ${weather.description}\n- Độ ẩm: ${weather.humidity}%\n- Gió: ${weather.wind} m/s\n- Ngày: ${weather.date}\nHãy dựa vào dữ liệu thời tiết này để tư vấn chính xác hơn.\n    `;\n  }\n  const system_prompt = `Bạn là một trợ lý du lịch thông minh. \nHãy tư vấn dựa trên thời gian, địa điểm, và đặc biệt dựa vào thông tin thời tiết nếu có.\nTrả lời theo cấu trúc:\n🌤 Thời tiết: [ngắn gọn, dựa vào dữ liệu thực tế nếu có]\n🎯 Gợi ý hoạt động: [hoạt động phù hợp, nếu trời mưa thì khuyên hạn chế camping ngoài trời]\n🎒 Danh sách vật dụng: [những đồ cần mang theo phù hợp thời tiết]\n⚠️ Lưu ý đặc biệt: [cảnh báo hoặc khuyến nghị quan trọng]\n\nMỗi mục ≤75 từ, rõ ràng và ngắn gọn.`;\n  return await callGemini(system_prompt, weatherContext + \"\\n\\nCâu hỏi: \" + prompt);\n};\n\n// 3️⃣ Flow đầy đủ: phân tích + thời tiết + tư vấn\n// 3️⃣ Flow đầy đủ: phân tích + thời tiết + tư vấn\nexport const getTravelPlan = async userPrompt => {\n  const extracted = await extractTimeAndLocation(userPrompt);\n  let weather = null;\n  if (extracted.location !== \"Không xác định\") {\n    try {\n      weather = await getWeather(extracted.location, extracted.date);\n    } catch (err) {\n      console.error(\"Không lấy được thời tiết:\", err.message);\n    }\n  }\n\n  // ✅ Truyền weather vào để Gemini tư vấn chuẩn hơn\n  const advice = await getTravelAdvice(userPrompt, weather);\n\n  // ❌ Không cần trả về extractedInfo nữa nếu bạn chỉ muốn hiển thị tư vấn\n  return {\n    advice // chỉ giữ lại câu trả lời đã tư vấn\n  };\n};","map":{"version":3,"names":["getWeather","GEMINI_API_URL","callGemini","system_prompt","prompt","payload","contents","role","parts","text","generationConfig","temperature","maxOutputTokens","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","candidates","content","error","console","extractTimeAndLocation","result","parse","e","location","date","getTravelAdvice","weather","weatherContext","temp","description","humidity","wind","getTravelPlan","userPrompt","extracted","err","message","advice"],"sources":["D:/Project_EXE/client/src/utils/geminiApi.js"],"sourcesContent":["// src/utils/geminiApi.js\r\n// Bạn là một trợ lý du lịch thông minh. Với mỗi câu hỏi, hãy:\r\n//\r\n// 1. Kiểm tra và cung cấp thông tin dự báo thời tiết chính xác của địa điểm và ngày được hỏi.\r\n// 2. Dựa vào thời tiết đó, đưa ra các gợi ý thực tế theo cấu trúc sau (ngắn gọn, rõ ràng, ≤200 tokens):\r\n//\r\n// 🌤 Dự báo thời tiết: [thông tin thời tiết chính xác ngày hôm đó tại địa điểm]\r\n// 🎯 Gợi ý hoạt động: [hoạt động phù hợp, nếu thời tiết xấu thì khuyên không camping]\r\n// 🎒 Danh sách vật dụng: [những đồ cần mang theo, phù hợp thời tiết]\r\n// ⚠️ Lưu ý đặc biệt: [cảnh báo hoặc lưu ý an toàn, sức khỏe, giao thông]\r\n\r\nimport { getWeather } from \"./weatherApi\";\r\n\r\nconst GEMINI_API_URL =\r\n  \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyD2l-YV0kiDkxdmNrac-dO-THEQVSWKdtE\";\r\n\r\n// Hàm gọi chung Gemini\r\nconst callGemini = async (system_prompt, prompt) => {\r\n  const payload = {\r\n    contents: [\r\n      {\r\n        role: \"user\",\r\n        parts: [{ text: system_prompt }, { text: prompt }],\r\n      },\r\n    ],\r\n    generationConfig: {\r\n      temperature: 0.7,\r\n      maxOutputTokens: 1000,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(GEMINI_API_URL, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const text = await response.text();\r\n      throw new Error(`Lỗi Gemini: ${response.status} - ${text}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return (\r\n      data?.candidates?.[0]?.content?.parts?.[0]?.text || \"Không có phản hồi.\"\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Gemini API error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 1️⃣ Trích xuất địa điểm và thời gian\r\nexport const extractTimeAndLocation = async (prompt) => {\r\n  const system_prompt = `Bạn là một trợ lý phân tích thông tin du lịch.\r\nTừ câu hỏi của người dùng, hãy trả về kết quả dưới dạng JSON đúng chuẩn, không có chữ thừa:\r\n{\r\n  \"location\": \"tên địa điểm hoặc 'Không xác định'\",\r\n  \"date\": \"YYYY-MM-DD hoặc 'Không xác định'\"\r\n}`;\r\n  const result = await callGemini(system_prompt, prompt);\r\n\r\n  try {\r\n    return JSON.parse(result);\r\n  } catch (e) {\r\n    console.error(\"Lỗi parse JSON từ Gemini:\", result);\r\n    return { location: \"Không xác định\", date: \"Không xác định\" };\r\n  }\r\n};\r\n\r\n// 2️⃣ Tư vấn chuyến đi\r\nexport const getTravelAdvice = async (prompt, weather = null) => {\r\n  let weatherContext = \"\";\r\n  if (weather) {\r\n    weatherContext = `\r\nThông tin thời tiết đã phân tích trước:\r\n- Địa điểm: ${weather.location}\r\n- Nhiệt độ: ${weather.temp}°C\r\n- Mô tả: ${weather.description}\r\n- Độ ẩm: ${weather.humidity}%\r\n- Gió: ${weather.wind} m/s\r\n- Ngày: ${weather.date}\r\nHãy dựa vào dữ liệu thời tiết này để tư vấn chính xác hơn.\r\n    `;\r\n  }\r\n\r\n  const system_prompt = `Bạn là một trợ lý du lịch thông minh. \r\nHãy tư vấn dựa trên thời gian, địa điểm, và đặc biệt dựa vào thông tin thời tiết nếu có.\r\nTrả lời theo cấu trúc:\r\n🌤 Thời tiết: [ngắn gọn, dựa vào dữ liệu thực tế nếu có]\r\n🎯 Gợi ý hoạt động: [hoạt động phù hợp, nếu trời mưa thì khuyên hạn chế camping ngoài trời]\r\n🎒 Danh sách vật dụng: [những đồ cần mang theo phù hợp thời tiết]\r\n⚠️ Lưu ý đặc biệt: [cảnh báo hoặc khuyến nghị quan trọng]\r\n\r\nMỗi mục ≤75 từ, rõ ràng và ngắn gọn.`;\r\n\r\n  return await callGemini(system_prompt, weatherContext + \"\\n\\nCâu hỏi: \" + prompt);\r\n};\r\n\r\n// 3️⃣ Flow đầy đủ: phân tích + thời tiết + tư vấn\r\n// 3️⃣ Flow đầy đủ: phân tích + thời tiết + tư vấn\r\nexport const getTravelPlan = async (userPrompt) => {\r\n  const extracted = await extractTimeAndLocation(userPrompt);\r\n\r\n  let weather = null;\r\n  if (extracted.location !== \"Không xác định\") {\r\n    try {\r\n      weather = await getWeather(extracted.location, extracted.date);\r\n    } catch (err) {\r\n      console.error(\"Không lấy được thời tiết:\", err.message);\r\n    }\r\n  }\r\n\r\n  // ✅ Truyền weather vào để Gemini tư vấn chuẩn hơn\r\n  const advice = await getTravelAdvice(userPrompt, weather);\r\n\r\n  // ❌ Không cần trả về extractedInfo nữa nếu bạn chỉ muốn hiển thị tư vấn\r\n  return {\r\n    advice,   // chỉ giữ lại câu trả lời đã tư vấn\r\n  };\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}